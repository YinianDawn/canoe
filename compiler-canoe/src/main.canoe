// this is comment
/** this is another comment */
package main
/** this is another comment again 

*/

import abc.canoe1 as  canoe1 

import (
    abc.abc as a  
)

// match语句

match :with x {
    1: break
    >2: {}
    else: x
}

x += match :with x {
    1: break
    >2: {}
    else: x
}

// 判断语句

x += if x > 5 {
    x + y
} else {
    6
}

if x > 5 {
    x + y
}
if x > 5 {
    x + y
} else if x > 6{
    x
}
if x > 5 {
    x + y
} else {
    y
}
if x > 5 {
    x + y
} else if x > 6{
    x
} else if x > 5 {
    x + y
} else {
    y
}

// 运算赋值语句

a += 1
a -= 1


// 自增自减语句 一定要是对有名字的变量进行自增自减

a++
a.a--
a.a(true, 1).b++
a.a(1).b(false, 2).c   ++         // error

// 循环语句

loop :loop1 {

}

loop {

}

for :loop1 item in range(3) {

}
for item,i in range(3) {
    
}




// return语句

return {

} 
return { return {} } { } { } 

return []{}
return [1]{}
return return11[1]{{},{}}

return true
return 1
return "1"
return (1 )
return !true
return 1 + 1
return a++++
return x -> x + 1
return x,y -> {
    return x + y
}





newCompiler,newCompiler,newCompiler,newCompiler :canoe.compiler.newCompiler

main :{} :() := () {
    newCompiler(OS.args()).compile()
}

print :(str :string, para... :ToString) :native

testGoto :{} :() := () {
    loop {
        goto goto1
    }

    goto1 :goto
}

// testCanoe

WeekDay :enum :{
    Monday {"Monday"}
    Tuesday {"Tuesday"}
    Wednesday {"Wednesday"}
    Thursday {"Thursday"}
    Friday {"Friday"}
    Saturday {"Saturday"}
    Sunday {"Sunday"}

    name :string
}

add :int :(:int, :int) := (x :int, y :int) {
    return x + y
}  

testIf :{} :(:int) := (x :int) {
    if x == 5 {
        print("x == 5")
    }
    if x > 5 {
        print("x > 5")
    }
    if x >= 5 {
        print("x >= 5")
    }
    if x < 5 {
        print("x < 5")
    }
    if x <= 5 {
        print("x <= 5")
    }
    if x == 5 {
        print("x == 5")
    }
    if x < 0 {
        print("x < 0")
    } else {
        print("x < 0 else")
    }
}

testElseIf :{} :(:int) := (x :int) {
    if x == 5 {
        print("x == 5")
    } else if x > 5 {
        print("x > 5")
    } else {
        print("else")
    }
}

testMatch :{} :(:int) := (x :int) {
    match x {
        1: print("1")
        2: print("2") with
        3: print("3")
        in [1, 2, 3]: print("in [1, 2, 3]")
        > 5: print(">5")
        else: print("else")
    }
}

testLoop :{} :() := () {
    i = 0
    loop {
        i = i + 1
        if i > 5 {
            break
        }
    }

    i = 0
    loop {
        i = i + 1
        if i > 5 {
            break 
        }

        loop :loop2 {
            break loop2
        }
    }

    i = 0
    loop :loop1 {
        i = i + 1
        if i > 5 {
            break 
        }

        loop {
            continue loop1
        }
    }
}

testFor :{} :() := () {
    list = [1, 2, 3]
    for item, i in list {
        print("item:" + item + " i:" + i)
    }
}

testBool :{} :() := () {
    True := true
    False := false
}

testLogical :{} :() := () {
    x = 5
    if x > 5 && x == 5 {
        print("x > 5 and x == 5")
    }
    if x > 5 || x == 5 {
        print("x > 5 || x == 5")
    }
    if !(x > 5) {
        print("!(x > 5)")
    }
}

sub :int :(:int, :int) := x,y -> x - y

A :{
    print1 :{} :() := () {
        print("print1")
    }
    print2 :{} :() := () {
        print("print2")
    }
}

testMethod :{} :() := () {
    a := A{}
    a.print1()
    a.print1()..print2()
}

testSentence :{} :() := () {
    sum = 1 + 2
    difference = 1 - 2
    product = 1 * 2
    quotient = 1 / 2
    remainder = 1 % 2

    bitAnd = 1 & 0
    bitOr = 1 | 0
    bitXor = 1 ^ 0
    bitNot = !1
    bitMoveLeft = 1 << 1
    bitMoveRight = 2 >> 1

    real1 = 1.0
    real2 =  .1
    real2 = 1__22.1

    x = 5
    x += 1
    x -= 1
    x *= 1
    x /= 1
    x %= 1
}

testReturn1 :{:int, :string} :() := () {
    return 1, "123"
}

return1, return2 := testReturn1()

testReturn2 :{xxx:int, yyy:string} :() := () {
    xxx = 1
    yyy = "yyy"
    return 
}

xxx, yy: yyy := testReturn2()  

// 123
