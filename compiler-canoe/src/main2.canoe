// this is comment
/** this is another comment */
package main
/** this is another comment again 

*/

// 不支持全包名调用 包外 即本文件夹外部文件必须通过import引入才可以使用

import "canoe/main" // 引入包
import "canoe/main" as person22 // 包起别名
import "canoe/main" as . // 包内所有都引入
import "canoe/main" as _ // 引入包 不可调用 作用只是这个包默认方法

import "canoe/main" extra Person //这个包里面的Person可以直接用而不是 包名.Person 使用
import "canoe/main" extra ( Person , Person as P , Person. , Person.+ ) //+号操作符重载引入
import "canoe/main" as . except Person //仅全引入才会有except语法
import "canoe/main" as . except (Person,Person.+) //仅全引入才会有except语法

import "canoe/main" as person22 extra Person as P
import "canoe/main" as person22 extra (Person as P,Person.+) 

import "canoe/main" as _ extra Person 
import "canoe/main" as _ extra (Person,Person.+) 

import (
    "canoe/main" // 引入包
    "canoe/main" as person22 // 包起别名
    "canoe/main" as . // 包内所有都引入
    "canoe/main" as _ // 引入包 不可调用 作用只是这个包默认方法

    "canoe/main" extra Person as P //这个包里面的Person可以直接用而不是 包名.Person 使用
    "canoe/main" extra (Person as P,Person.+) //+号操作符重载引入
    "canoe/main" as . except (Person,Person.+) //仅全引入才会有except语法

    "canoe/main" as person22 extra Person 
    "canoe/main" as person22 extra (Person,Person.+) 

    "canoe/main" as _ extra Person 
    "canoe/main" as _ extra (Person,Person.+) 
)


answer := 8 * 5 + 2
answer := 8 + 5 + 2
answer := 8 + 5 * 2

xmax, ymax := 100,100

xmax, ymax := 100

1 . string ( )

1 . 
to (
    10
    )

"Hello".intsesect("world")

a + b

a.+(b)

counter += 1

x :int = 1234567890

x * x * x

"Hello"[4]

// 判断语句要加{}

if x > 0 {1} else {-1}

if (x > 0) {1} else {-1}

s = if (x > 0) {1} else {-1}

if (n > 0) { r = r * n; n -= 1 }
if (n > 0) { 
    r = r * n
    n -= 1
}
if n > 0 { r = r * n; n -= 1 }
if n > 0 { 
    r = r * n
    n -= 1
}

distance = { dx = x - x0; dy = y - y0; sqrt(dx * dx + dy * dy) }

// 循环语句还是要加{}

loop {
    if (n <= 0) break
    r = r * n
    n -= 1
}

each i <- 1.to(10) { r = r * i}

each ch <- "Hello" { sum += ch }

for i <- 1:3; j <- 1:3 { print((10 * i + j) + "")}

for i <- 1:3; j <- 1:3; i != j { print((10 * i + j) + "")}

for i <- 1:3; from <- 4 - i; j <- from:3 { print((10 * i + j) + "")}

abs :double :(x :int) = if x >= 0 { x } else { -x }

fac :int :(n :int) = {
    r = 1
    for i <- 1:n { r = r * i}
    r
}

fac :int :(n :int) := if n <= 0 { 1 } else n * fac(n - 1)


// 模式匹配

unit = {
    name1 :string
    name2 :string
}





each item, i <- 1:2:10 {
    print(i + " " + item)
}





fac := (n :int) :int -> if n <= 0 -> 1 else n * fac(n - 1)

new = each n <- 1:10 -> x * 2

mul := (x :int) -> (y :int) -> x * y

yy = mul(1)
product = yy(2)

each x <- 1:10; y <- 1:10; x != y -> print(x + " " + y)

// Canoe {
//     load :(x) :bool
// }

// dog :() :cargo[]:int {
//     // 对所有愿意接受本线程消息的线程发送消息
//     // canoe()返回一个数组
//     canoe().load("hi")

//     canoe() // 谁听我的
//     cargo() // 我收到的

//     canoe()[0].load("hi") // 我发送的

//     hover dog()
// }

// canoe dog()

// 返回一个线程元象 该元象拥有 canoes(cs... :canoe)接受新的受众 
// dog1 := canoe dog()

// dog.load("123")


// dog2 := canoe :{dog1} dog() 



// match语句

match :with x {
    1: with
    1, >5: without
    >2: {}
    else: x
}

x += match :with x {
    1: with
    >2: {}
    else: x
}

// 判断语句

x += if x > 5 {
    x + y
} else {
    6
}

if x > 5 {
    x + y
}
if x > 5 {
    x + y
} else if x > 6{
    x
}
if x > 5 {
    x + y
} else {
    y
}
if x > 5 {
    x + y
} else if x > 6{
    x
} else if x > 5 {
    x + y
} else {
    y
}

// 运算赋值语句

a += 1
a -= 1


// 自增自减语句 一定要是对有名字的变量进行自增自减

a++
a.a--
a.a(true, 1).b++
a.a(1).b(false, 2).c   ++         // error

// 循环语句

loop :loop1 i=0,j=0 {
    break
}

loop {
    break loop1
}

for :loop1 i=0;i<10;i++{
continue loop1
}
for i=0,j=0;i<10;i++{
    continue
}


each :loop1 item in range(3) {

}
each item,i in range(3) {
    
}




// return语句

return {

} 
return { return {} } :{ } :{ } 

return []{}
return [1]{}
return [1]{{},{}}:return1

return true
return 1
return "1"
return (1 )
return !true
return 1 + 1
return a++++
return x -> x + 1
return x,y -> {
    return x + y
}

y = x.(int)
x.a()..b()
r = x ?: int



newCompiler :canoe.compiler.newCompiler

main :{} :() 

main := () {
    newCompiler(OS.args()).compile()
}

print :(str :string, para... :ToString) :native

testGoto :{} :() := () {
    loop {
        goto goto1
    }

    goto1 :goto
}

// testCanoe

WeekDay :enum :{
    Monday = {"Monday"}
    Tuesday :{"Tuesday"}
    Wednesday ={"Wednesday"}
    Thursday ={"Thursday"}
    Friday ={"Friday"}
    Saturday ={"Saturday"}
    Sunday ={"Sunday"}

    name :string
}

add :int :(:int, :int) := (x :int, y :int) {
    return x + y
}  

add :int :(:int, :int :string) := (x :int, y :int) {
    return x + y
}

add :int :(:int,... :int) := (x :int, y :int) {
    return x + y
} 
add :int :(... :int) := (x :int, y :int) {
    return x + y
} 

testIf :{} :(:int) := (x :int) {
    if x == 5 {
        print("x == 5")
    }
    if x > 5 {
        print("x > 5")
    }
    if x >= 5 {
        print("x >= 5")
    }
    if x < 5 {
        print("x < 5")
    }
    if x <= 5 {
        print("x <= 5")
    }
    if x == 5 {
        print("x == 5")
    }
    if x < 0 {
        print("x < 0")
    } else {
        print("x < 0 else")
    }
}

testElseIf :{} :(:int) := (x :int) {
    if x == 5 {
        print("x == 5")
    } else if x > 5 {
        print("x > 5")
    } else {
        print("else")
    }
}

testMatch :{} :(:int) := (x :int) {
    match x {
        1: print("1")
        2: print("2") with
        3: print("3")
        in [1, 2, 3]: print("in [1, 2, 3]")
        > 5: print(">5")
        else: print("else")
    }
}

testLoop :{} :() := () {
    i = 0
    loop {
        i = i + 1
        if i > 5 {
            break
        }
    }

    i = 0
    loop {
        i = i + 1
        if i > 5 {
            break 
        }

        loop :loop2 {
            break loop2
        }
    }

    i = 0
    loop :loop1 {
        i = i + 1
        if i > 5 {
            break 
        }

        loop {
            continue loop1
        }
    }
}

testFor :{} :() := () {
    list = [1, 2, 3]
    each item, i in list {
        print("item:" + item + " i:" + i)
    }
}

testBool :{} :() := () {
    True := true
    False := false
}

testLogical :{} :() := () {
    x = 5
    if x > 5 && x == 5 {
        print("x > 5 and x == 5")
    }
    if x > 5 || x == 5 {
        print("x > 5 || x == 5")
    }
    if !(x > 5) {
        print("!(x > 5)")
    }
}

sub :int :(:int, :int) := x,y -> x - y

A :{
    print1 :{} :() := () {
        print("print1")
    }
    print2 :{} :() := () {
        print("print2")
    }
}

testMethod :{} :() := () {
    a := {}:A
    a.print1()
    a.print1()..print2()
}

testSentence :{} :() := () {
    sum = 1 + 2
    difference = 1 - 2
    product = 1 * 2
    quotient = 1 / 2
    remainder = 1 % 2

    bitAnd = 1 & 0
    bitOr = 1 | 0
    bitXor = 1 ^ 0
    bitNot = !1
    bitMoveLeft = 1 << 1
    bitMoveRight = 2 >> 1

    real1 = 1.0
    real2 =  .1
    real2 = 1__22.1

    x = 5
    x += 1
    x -= 1
    x *= 1
    x /= 1
    x %= 1
}

testReturn1 :{:int, :string} :() := () {
    return 1, "123"
}

return1, return2 := testReturn1()

testReturn2 :{xxx:int, yyy:string} :() := () {
    xxx = 1
    yyy = "yyy"
    return 
}

xxx :xxxx, yy :yyy := testReturn2()  

+ :int :(:int, :int) := (x, y) {
    // 在本范围内把 + 操作符功能修改掉 
    // 这方法体内用的符号是上级操作符的使用方式
    return x + y
}

-(x :int) :int {
    return -x
}

// 123
    